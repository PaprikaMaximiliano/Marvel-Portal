{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/UseMarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/CharSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offSet","res","results","map","_transformCharacter","getCharacterByName","_ref2","_callee2","name","_context2","getCharacter","_ref3","_callee3","id","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","imgStyle","includes","_jsxs","className","children","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemsLoading","setNewItemsLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charsEnded","setCharsEnded","onRequest","window","addEventListener","loadMore","removeEventListener","innerHeight","document","documentElement","scrollTop","scrollingElement","scrollHeight","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","obj","logger","catch","disabled","Skeleton","_Fragment","CharInfo","charId","skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","Component","CharSearchForm","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/5.ddea601a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            style={{\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto'\r\n            }}\r\n            src={img}\r\n            alt=\"Error\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey =\r\n        'ts=1&apikey=8229e073f486c74dcfc68279f3ef40be&hash=921d2f6212f917bb3b605612c467e8a1';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offSet = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offSet}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offSet = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?limit=8&offset=${offSet}&${_apiKey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(\r\n            `${_apiBase}comics/${id}?&${_apiKey}`\r\n        );\r\n        return _transformComics(res.data.results[0])\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description\r\n                ? `${char.description.slice(0, 210)}...`\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || 'en-us',\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}`\r\n                : 'not available',\r\n        };\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        clearError,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(\r\n        async (\r\n            url,\r\n            method = 'GET',\r\n            body = null,\r\n            headers = { 'Content-Type': 'application/json' }\r\n        ) => {\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers });\r\n                if (!response.ok) {\r\n                    throw new Error(\r\n                        `Could not fetch ${url}, status ${response.status}`\r\n                    );\r\n                }\r\n\r\n                const data = await response.json();\r\n                setLoading(false);\r\n                return data;\r\n            } catch (e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n                throw e;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n    },[])\r\n\r\n    return {loading,request,error,clearError}\r\n};\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/UseMarvelService';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id).then(onCharLoaded);\r\n    };\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!\r\n                    <br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">Or choose another one</p>\r\n                <button className=\"button button__main\">\r\n                    <div onClick={updateChar} className=\"inner\">\r\n                        try it\r\n                    </div>\r\n                </button>\r\n                <img\r\n                    src={mjolnir}\r\n                    alt=\"mjolnir\"\r\n                    className=\"randomchar__decoration\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = char;\r\n    let imgStyle = { objectFit: 'cover' };\r\n    if (thumbnail.includes('image_not_available.jpg')) {\r\n        // if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\r\n        imgStyle = { objectFit: 'contain' };\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img\r\n                src={thumbnail}\r\n                alt=\"Random character\"\r\n                className=\"randomchar__img\"\r\n                style={imgStyle}\r\n            />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">{description}</p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RandomChar;\r\n","import './charList.scss';\r\nimport useMarvelService from '../../services/UseMarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charsEnded, setCharsEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        window.addEventListener('scroll', loadMore);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', loadMore);\r\n        };\r\n    }, []);\r\n\r\n    const loadMore = () => {\r\n        if (\r\n            window.innerHeight + document.documentElement.scrollTop >\r\n            document.scrollingElement.scrollHeight\r\n        ) {\r\n            // this.onRequest(this.state.offset);\r\n        }\r\n    };\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\r\n        getAllCharacters(offset).then(onCharListLoaded);\r\n    };\r\n\r\n    const onCharListLoaded = async  (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList((charList) => [...charList, ...newCharList]);\r\n        setNewItemsLoading(false);\r\n        setOffset((offset) => offset + 9);\r\n        setCharsEnded(ended);\r\n    };\r\n\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach((item) =>\r\n            item.classList.remove('char__item_selected')\r\n        );\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    };\r\n\r\n    const renderItems = (arr) => {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { objectFit: 'cover' };\r\n            if (\r\n                item.thumbnail ===\r\n                'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n            ) {\r\n                imgStyle = { objectFit: 'unset' };\r\n            }\r\n\r\n            return (\r\n                <li\r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={(el) => (itemRefs.current[i] = el)}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyDown={(e) => {\r\n                        if (e.key === ' ' || e.key === 'Enter') {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}\r\n                >\r\n                    <img\r\n                        src={item.thumbnail}\r\n                        alt={item.name}\r\n                        style={imgStyle}\r\n                    />\r\n                    <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <ul className=\"char__grid\">{items}</ul>;\r\n    };\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemsLoading ? <Spinner /> : null;\r\n\r\n    if(loading){\r\n        import('./someFunc')\r\n            .then(obj => obj.logger())\r\n            .catch()\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemsLoading}\r\n                style={{ display: charsEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/UseMarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId).then(onCharLoaded);\r\n    };\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton />;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n    let imgStyle = { objectFit: 'cover' };\r\n    if (thumbnail.includes('image_not_available.jpg')) {\r\n        imgStyle = { objectFit: 'contain' };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">{description}</div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0\r\n                    ? null\r\n                    : 'There is no comics with this character'}\r\n                {comics.slice(0, 10).map((item, i) => {\r\n                    return (\r\n                        <li key={i} className=\"char__comics-item\">\r\n                            {item.name}\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { Component } from 'react';\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/UseMarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/Marvel-Portal/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from 'react';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../CharSearchForm/CharSearchForm\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}